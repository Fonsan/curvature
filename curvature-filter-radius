#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import sys
import codecs
import math
import msgpack
import argparse
import pprint

# Set our output to default to UTF-8
reload(sys)
sys.setdefaultencoding('utf-8')
sys.stderr = codecs.getwriter('utf8')(sys.stderr)
# sys.stdout = codecs.getwriter('utf8')(sys.stdout)

# From http://www.johndcook.com/python_longitude_latitude.html
def distance_on_unit_sphere(lat1, long1, lat2, long2):
    if lat1 == lat2  and long1 == long2:
        return 0

    # Convert latitude and longitude to
    # spherical coordinates in radians.
    degrees_to_radians = math.pi/180.0

    # phi = 90 - latitude
    phi1 = (90.0 - lat1)*degrees_to_radians
    phi2 = (90.0 - lat2)*degrees_to_radians

    # theta = longitude
    theta1 = long1*degrees_to_radians
    theta2 = long2*degrees_to_radians

    # Compute spherical distance from spherical coordinates.

    # For two locations in spherical coordinates
    # (1, theta, phi) and (1, theta, phi)
    # cosine( arc length ) =
    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'
    # distance = rho * arc length

    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) +
           math.cos(phi1)*math.cos(phi2))
    arc = math.acos( cos )

    # Remember to multiply arc by the radius of the earth
    # in your favorite set of units to get length.
    return arc

def distance_on_earth(lat1, long1, lat2, long2):
    rad_earth_m = 6373000 # Radius of the earth in meters
    return distance_on_unit_sphere(lat1, long1, lat2, long2) * rad_earth_m


parser = argparse.ArgumentParser(description='Remove segments with a radius larger or equal to the specified.')
parser.add_argument('--radius', type=float, help='A number')
args = parser.parse_args()

if not args.radius:
    sys.stderr.write("Error:   --radius must be specified.\n")
    exit(2);

unpacker = msgpack.Unpacker(sys.stdin, use_list=True)
for item in unpacker:
    all_segments = item['segments']
    indexes = [i for i, segment
        in enumerate(all_segments)
        if segment['radius'] <= args.radius or i == 0 or i == len(all_segments) - 1
    ]
    item['segments'] = filtered_segments = [all_segments[i] for i in indexes]
    for i, segment in enumerate(item['segments']):
        if i + 1 < len(item['segments']):
            segment['end'] = end = filtered_segments[i + 1]['start']
            start = segment['start']
            segment['length'] = distance_on_earth(start[0], start[1], end[0], end[1])
    sys.stdout.write(msgpack.packb(item))
